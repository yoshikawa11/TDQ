正解: A. ブラウザでREST APIを使ったデータ取得処理を書く場合、fetchは非同期処理にしたほうがよい

A. 正しい理由
fetch は非同期関数であり、通信が完了するまで時間がかかるため、同期的に扱うとUIがフリーズしてしまう。
したがって、async/await や .then() を使って非同期で処理することが推奨される。

B. 間違いの理由
REST APIのバックエンド実装でも、DBアクセスは非同期にすべき。
同期処理にすると、1つのクライアントの処理中に他のリクエストがブロックされ、スケーラビリティが著しく低下する。

C. 間違いの理由
JavaScriptの非同期処理（Promise, async/awaitなど）は並列処理ではない。
イベントループとタスクキューで順に実行される協調的な非同期処理（Concurrency）であり、
スレッドによるParallelとは異なる。

D. 間違いの理由
Web Workerはメインスレッドとは別スレッドで動作し、スレッド間でデータはコピー（または転送）される。
共有メモリではなく、postMessageによる明示的な通信が必要で、通常のメインスレッドのコードのようには書けない。

